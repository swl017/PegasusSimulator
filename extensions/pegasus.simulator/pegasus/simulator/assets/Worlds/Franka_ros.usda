#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (1.2, 1.2, 0.8)
                double3 target = (-5.9052795986502815e-9, -5.905279154561072e-9, 0.5000000472422375)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
            int "/persistent/simulation/minFrameRate" = 60
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "Franka" (
    prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Robots/Franka/franka_alt_fingers.usd@
)
{
    quatd xformOp:orient = (0.7071067690849304, 0, 0, 0.7071067690849304)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, -0.6399999856948853, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    over "panda_link0"
    {
    }

    over "panda_link1"
    {
    }

    over "panda_link2"
    {
    }

    over "panda_link3"
    {
    }

    over "panda_link4"
    {
    }

    over "panda_link5"
    {
    }

    over "panda_link6"
    {
    }

    over "panda_link7"
    {
    }

    over "panda_link8"
    {
    }

    over "panda_hand"
    {
    }

    over "panda_leftfinger"
    {
    }

    over "panda_rightfinger"
    {
    }
}

def Xform "background" (
    prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Environments/Simple_Room/simple_room.usd@
)
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

def PhysicsScene "physicsScene" (
    prepend apiSchemas = ["PhysxSceneAPI"]
)
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 9.81
    uniform token physxScene:broadphaseType = "MBP"
    bool physxScene:enableCCD = 1
    bool physxScene:enableGPUDynamics = 0
    bool physxScene:enableStabilization = 1
    uniform token physxScene:solverType = "TGS"
    uint physxScene:timeStepsPerSecond = 60
}

def OmniGraph "ActionGraph"
{
    token evaluationMode = "Automatic"
    token evaluator:type = "execution"
    token fabricCacheBacking = "Shared"
    int2 fileFormatVersion = (1, 9)
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "OnPlaybackTick"
    {
        token node:type = "omni.graph.action.OnPlaybackTick"
        int node:typeVersion = 2
        custom double outputs:deltaSeconds
        custom double outputs:frame
        custom uint outputs:tick (
            customData = {
                bool isExecution = 1
            }
        )
        custom double outputs:time
    }

    def OmniGraphNode "ReadSimTime"
    {
        custom bool inputs:resetOnStop
        custom int64 inputs:swhFrameNumber
        token node:type = "omni.isaac.core_nodes.IsaacReadSimulationTime"
        int node:typeVersion = 1
        custom double outputs:simulationTime
    }

    def OmniGraphNode "Context"
    {
        custom uchar inputs:domain_id
        custom bool inputs:useDomainIDEnvVar
        token node:type = "omni.isaac.ros2_bridge.ROS2Context"
        int node:typeVersion = 2
        custom uint64 outputs:context
    }

    def OmniGraphNode "PublishJointState"
    {
        custom uint64 inputs:context
        prepend uint64 inputs:context.connect = </ActionGraph/Context.outputs:context>
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/OnPlaybackTick.outputs:tick>
        custom string inputs:nodeNamespace
        custom string inputs:qosProfile
        custom uint64 inputs:queueSize
        custom rel inputs:targetPrim = </Franka> (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        custom double inputs:timeStamp
        prepend double inputs:timeStamp.connect = </ActionGraph/ReadSimTime.outputs:simulationTime>
        custom string inputs:topicName = "isaac_joint_states"
        token node:type = "omni.isaac.ros2_bridge.ROS2PublishJointState"
        int node:typeVersion = 1
    }

    def OmniGraphNode "SubscribeJointState"
    {
        custom uint64 inputs:context
        prepend uint64 inputs:context.connect = </ActionGraph/Context.outputs:context>
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/OnPlaybackTick.outputs:tick>
        custom string inputs:nodeNamespace
        custom string inputs:qosProfile
        custom uint64 inputs:queueSize
        custom string inputs:topicName = "isaac_joint_commands"
        token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeJointState"
        int node:typeVersion = 2
        custom double[] outputs:effortCommand
        custom uint outputs:execOut (
            customData = {
                bool isExecution = 1
            }
        )
        custom token[] outputs:jointNames
        custom double[] outputs:positionCommand
        custom double outputs:timeStamp
        custom double[] outputs:velocityCommand
    }

    def OmniGraphNode "ArticulationController"
    {
        custom double[] inputs:effortCommand
        prepend double[] inputs:effortCommand.connect = </ActionGraph/SubscribeJointState.outputs:effortCommand>
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/OnPlaybackTick.outputs:tick>
        custom int[] inputs:jointIndices
        custom token[] inputs:jointNames
        prepend token[] inputs:jointNames.connect = </ActionGraph/SubscribeJointState.outputs:jointNames>
        custom double[] inputs:positionCommand
        prepend double[] inputs:positionCommand.connect = </ActionGraph/SubscribeJointState.outputs:positionCommand>
        custom string inputs:robotPath = "/Franka"
        custom rel inputs:targetPrim (
            customData = {
                dictionary omni = {
                    dictionary graph = {
                        string relType = "target"
                    }
                }
            }
        )
        custom double[] inputs:velocityCommand
        prepend double[] inputs:velocityCommand.connect = </ActionGraph/SubscribeJointState.outputs:velocityCommand>
        token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
        int node:typeVersion = 1
    }

    def OmniGraphNode "PublishClock"
    {
        custom uint64 inputs:context
        prepend uint64 inputs:context.connect = </ActionGraph/Context.outputs:context>
        custom uint inputs:execIn (
            customData = {
                bool isExecution = 1
            }
        )
        prepend uint inputs:execIn.connect = </ActionGraph/OnPlaybackTick.outputs:tick>
        custom string inputs:nodeNamespace
        custom string inputs:qosProfile
        custom uint64 inputs:queueSize
        custom double inputs:timeStamp
        prepend double inputs:timeStamp.connect = </ActionGraph/ReadSimTime.outputs:simulationTime>
        custom string inputs:topicName
        token node:type = "omni.isaac.ros2_bridge.ROS2PublishClock"
        int node:typeVersion = 1
    }
}

